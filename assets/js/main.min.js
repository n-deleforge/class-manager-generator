function generateClass(){return"<?php\nclass "+CLASS_NAME+"\n{\n"+generateAttributes()+"\n"+generateGetterSetter()+"\n"+genererConstruct()+"\n\n}"}function generateAttributes(){let e="";for(let n=0;n<COLUMNS_NAME.length;n++)e+="private $_"+COLUMNS_NAME[n]+";\n";return e}function generateGetterSetter(){let e="";for(let n=0;n<COLUMNS_NAME.length;n++)e+="public function get"+ucFirst(COLUMNS_NAME[n])+"()\n{\n return $this->_"+COLUMNS_NAME[n]+";\n}\n",e+="public function set"+ucFirst(COLUMNS_NAME[n])+"($_"+COLUMNS_NAME[n]+")\n{\n return $this->_"+COLUMNS_NAME[n]+" = $_"+COLUMNS_NAME[n]+";\n}\n";return e}function genererConstruct(){return'public function __construct(array $options = [])\n{\n    if (!empty($options))\n    {\n        $this->hydrate($options);\n    }\n}\n\npublic function hydrate($data)\n{\n    foreach ($data as $key => $value) {\n        $methode = "set" . ucfirst($key);\n        if (is_callable(([$this, $methode])))\n        {\n            $this->$methode($value);\n        }\n    }\n}'}function generateManager(){let e=COLUMNS_NAME.find(e=>e==TABLE_ID);return"undefined"!=e&&COLUMNS_NAME.splice(COLUMNS_NAME.indexOf(e),1),"<?php\nclass "+CLASS_NAME+"Manager\n{\n"+generateAdd()+"\n\n"+generateUpdate()+"\n\n"+generateDelete()+"\n\n"+generateFindById()+"\n\n"+generateGetList()+"\n\n}"}function generateAdd(){let e="",n="",t="";for(let r=0;r<COLUMNS_NAME.length;r++)e+=COLUMNS_NAME[r]+",",n+=":"+COLUMNS_NAME[r]+",",t+='$q->bindValue(":'+COLUMNS_NAME[r]+'", $obj->get'+ucFirst(COLUMNS_NAME[r])+"());\n";return e=e.substr(0,e.length-1),n=n.substr(0,n.length-1),"public static function add("+CLASS_NAME+' $obj)\n{\n$db = DbConnect::getDb();\n$q = $db->prepare("INSERT INTO '+TABLE_NAME+" ("+e+") VALUES ("+n+')");\n'+t+"$q->execute();\n}"}function generateUpdate(){let e="",n="";for(let t=0;t<COLUMNS_NAME.length;t++)e+=COLUMNS_NAME[t]+"=:"+COLUMNS_NAME[t]+", ",n+='$q->bindValue(":'+COLUMNS_NAME[t]+'", $obj->get'+ucFirst(COLUMNS_NAME[t])+"());\n";return n+='$q->bindValue(":'+TABLE_ID+'", $obj->get'+ucFirst(TABLE_ID)+"());\n",e=e.substr(0,e.length-2),"public static function update("+CLASS_NAME+' $obj)\n{\n$db = DbConnect::getDb();\n$q = $db->prepare("UPDATE '+TABLE_NAME+" SET "+e+" WHERE "+TABLE_ID+"=:"+TABLE_ID+'");\n'+n+"$q->execute();\n}"}function generateDelete(){return"public static function delete("+CLASS_NAME+' $obj)\n{\n$db = DbConnect::getDb();\n$db->exec("DELETE FROM '+CLASS_NAME+" WHERE "+TABLE_ID+'=" . $obj->get'+ucFirst(TABLE_ID)+"());\n}"}function generateFindById(){return'public static function findById($id)\n{\n$db = DbConnect::getDb();\n$id = (int) $id;\n$q = $db->query("SELECT * FROM '+CLASS_NAME+" WHERE "+TABLE_ID+'=".$id);\n$results = $q->fetch(PDO::FETCH_ASSOC);\nif ($results != false) {\nreturn new '+CLASS_NAME+" ($results);\n }else {\nreturn false;\n}\n}"}function generateGetList(){return'public static function getList()\n{\n$db = DbConnect::getDb();\n$tab = [];\n$q = $db->query("SELECT * FROM '+CLASS_NAME+'");\nwhile ($donnees = $q->fetch(PDO::FETCH_ASSOC)) {\nif ($donnees != false) {\n$tab[] = new '+CLASS_NAME+"($donnees);\n}\n}\nreturn $tab;\n}"}get("#reset").addEventListener("click",()=>{get("#error").style.visibility="hidden";let e=get(".gen");for(let n=0;n<e.length;n++)e[n].value=""}),get("#generate").addEventListener("click",()=>{let e=0,n=get(".gen");for(let t=0;t<n.length;t++)""===n[t].value&&e++;0==e?(get("#error").innerHTML=_CONTENT.downloading,TABLE_NAME=get("#tableName").value,TABLE_ID=get("#tableId").value,CLASS_NAME=ucFirst(get("#className").value),COLUMNS_NAME=get("#columnsName").value.split(","),download(generateClass(),CLASS_NAME+".Class.php"),download(generateManager(),CLASS_NAME+"Manager.Class.php")):get("#error").style.visibility="visible"});