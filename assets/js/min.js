let tableName,tableId,className,columnsName,display;const linkGitHub='<a target="_blank" href="https://github.com/n-deleforge/class-manager-generator">GitHub</a>',linkHome='<a target="_blank" href="https://nicolas-deleforge.fr/">nd</a>',version="1.3",FR={generate:"Générer",error:"Tous les champs sont nécessaires.",footer:"Disponible sur "+linkGitHub+" (v 1.3) - Hébergé sur "+linkHome,tableNameLabel:"➡ NOM DE LA TABLE",tableNameDesc:"Nom de table qui correspond au nom tel qu'il est dans votre base de données SQL.",tableIdLabel:"➡ NOM DU CHAMP ID",tableIdDesc:"Champ ID de votre table SQL",columnsNameLabel:"➡ NOM DE TOUTES LES COLONNES",columnsNameDesc:'Les différentes colonnes de votre table SQL (doit respecter le format exact suivant : "col1,col2,col3").',classNameLabel:"➡ NOM CLASS/MANAGER",classNameDesc:"Nom de la Class et du Manager que vous allez créer (une majuscule est automatiquement appliquée)."},EN={generate:"Generate",error:"All the fields have to be filled.",footer:"Available on "+linkGitHub+" (v 1.3) - Hosted on "+linkHome,tableNameLabel:"➡ TABLE NAME",tableNameDesc:"Name of the table in your database.",tableIdLabel:"➡ ID FIELD NAME",tableIdDesc:"Name of the ID field of your table.",columnsNameLabel:"➡ COLUMNS NAMES",columnsNameDesc:"All the columns' names of your table. Must respect this format : col1,col2,col3",classNameLabel:"➡ CLASS/MANAGER NAME",classNameDesc:"Name of the Class and the Manager."};let language=navigator.language;get("#htmlTag").lang=language,display="fr"==language?FR:EN;let idName=Object.keys(display),values=Object.values(display);for(let e=0;e<idName.length;e++)get("#"+idName[e]).innerHTML=values[e];function generateClass(){return"<?php\nclass "+className+"\n{\n"+generateAttributes()+"\n"+generateGetterSetter()+"\n"+genererConstruct()+"\n\n}"}function generateAttributes(){let e="";for(let n=0;n<columnsName.length;n++)e+="private $_"+columnsName[n]+";\n";return e}function generateGetterSetter(){let e="";for(let n=0;n<columnsName.length;n++)e+="public function get"+ucFirst(columnsName[n])+"()\n{\n return $this->_"+columnsName[n]+";\n}\n",e+="public function set"+ucFirst(columnsName[n])+"($_"+columnsName[n]+")\n{\n return $this->_"+columnsName[n]+" = $_"+columnsName[n]+";\n}\n";return e}function genererConstruct(){return'public function __construct(array $options = [])\n    {\n        if (!empty($options))\n        {\n            $this->hydrate($options);\n        }\n    }\n\n    public function hydrate($data)\n    {\n        foreach ($data as $key => $value) {\n            $methode = "set" . ucfirst($key);\n            if (is_callable(([$this, $methode])))\n            {\n                $this->$methode($value);\n            }\n        }\n    }'}function generateManager(){let e=columnsName.find(e=>e==tableId);return"undefined"!=e&&columnsName.splice(columnsName.indexOf(e),1),"<?php\nclass "+className+"Manager\n{\n"+generateAdd()+"\n\n"+generateUpdate()+"\n\n"+generateDelete()+"\n\n"+generateFindById()+"\n\n"+generateGetList()+"\n\n}"}function generateAdd(){let e="",n="",t="";for(let a=0;a<columnsName.length;a++)e+=columnsName[a]+",",n+=":"+columnsName[a]+",",t+='$q->bindValue(":'+columnsName[a]+'", $obj->get'+ucFirst(columnsName[a])+"());\n";return e=e.substr(0,e.length-1),n=n.substr(0,n.length-1),"public static function add("+className+' $obj)\n{\n$db = DbConnect::getDb();\n$q = $db->prepare("INSERT INTO '+tableName+" ("+e+") VALUES ("+n+')");\n'+t+"$q->execute();\n}"}function generateUpdate(){let e="",n="";for(let t=0;t<columnsName.length;t++)e+=columnsName[t]+"=:"+columnsName[t]+", ",n+='$q->bindValue(":'+columnsName[t]+'", $obj->get'+ucFirst(columnsName[t])+"());\n";return n+='$q->bindValue(":'+tableId+'", $obj->get'+ucFirst(tableId)+"());\n",e=e.substr(0,e.length-2),"public static function update("+className+' $obj)\n{\n$db = DbConnect::getDb();\n$q = $db->prepare("UPDATE '+tableName+" SET "+e+" WHERE "+tableId+"=:"+tableId+'");\n'+n+"$q->execute();\n}"}function generateDelete(){return"public static function delete("+className+' $obj)\n{\n$db = DbConnect::getDb();\n$db->exec("DELETE FROM '+tableName+" WHERE "+tableId+'=" . $obj->get'+ucFirst(tableId)+"());\n}"}function generateFindById(){return'public static function findById($id)\n{\n$db = DbConnect::getDb();\n$id = (int) $id;\n$q = $db->query("SELECT * FROM '+tableName+" WHERE "+tableId+'=".$id);\n$results = $q->fetch(PDO::FETCH_ASSOC);\nif ($results != false) {\nreturn new '+className+" ($results);\n }else {\nreturn false;\n}\n}"}function generateGetList(){return'public static function getList()\n{\n$db = DbConnect::getDb();\n$langage = [];\n$q = $db->query("SELECT * FROM '+tableName+'");\nwhile ($donnees = $q->fetch(PDO::FETCH_ASSOC)) {\nif ($donnees != false) {\n$langage[] = new '+className+"($donnees);\n}\n}\nreturn $langage;\n}"}function get(e){return-1!=e.search("#")&&null!=document.getElementById(e.split("#")[1])?document.getElementById(e.split("#")[1]):-1!=e.search("~")&&null!=document.querySelectorAll(e.split("~")[1])?document.querySelectorAll(e.split("~")[1]):-1!=e.search("\\.")&&0!=document.querySelectorAll(e).length?document.querySelectorAll(e):void 0}function storage(e,n,t){return"get"==e?localStorage.getItem(n):"set"==e?localStorage.setItem(n,t):"rem"==e?localStorage.removeItem(n):void 0}function download(e,n){let t=new Blob([e],{type:"text/plain"}),a=document.createElement("a");a.download=n,a.href=window.URL.createObjectURL(t),a.click()}function ucFirst(e){return e.charAt(0).toUpperCase()+e.slice(1)}get("#generate").addEventListener("click",function(){let e=0,n=get(".gen");for(let t=0;t<n.length;t++)""===n[t].value&&e++;0==e?(get("#error").style.display="none",tableName=get("#tableName").value,tableId=get("#tableId").value,className=ucFirst(get("#className").value),columnsName=get("#columnsName").value.split(","),download(generateClass(),className+".Class.php"),download(generateManager(),className+"Manager.Class.php")):get("#error").style.display="block"});